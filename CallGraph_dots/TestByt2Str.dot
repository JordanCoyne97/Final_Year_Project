digraph  {
test_min;
assertEqual;
convert;
assertRaises;
test_max;
map;
capitalize;
join;
test_ternary;
test_binary;
setUp;
test_base;
zip;
list;
partition_number;
assertListEqual;
super;
test_ascending;
tuple;
format_bytes;
range;
assertTupleEqual;
test_descending;
test_prefix;
format_suffix;
test_plural;
test_main;
run_unittest;
Module;
"ConvertTest.__init__";
"PartitionTest.__init__";
"BaseTwoTest.__init__";
"BaseSixTest.__init__";
"BaseTenTest.__init__";
"BytesTest.__init__";
"SuffixTest.__init__";
test_min -> assertEqual;
test_min -> convert;
test_min -> assertRaises;
test_max -> map;
test_max -> capitalize;
test_max -> assertEqual;
test_max -> convert;
test_max -> join;
test_max -> assertRaises;
test_ternary -> convert;
test_ternary -> assertEqual;
test_binary -> convert;
test_binary -> assertEqual;
setUp -> setUp;
setUp -> super;
test_base -> zip;
test_base -> list;
test_base -> partition_number;
test_base -> assertListEqual;
test_ascending -> tuple;
test_ascending -> format_bytes;
test_ascending -> range;
test_ascending -> assertTupleEqual;
test_descending -> tuple;
test_descending -> format_bytes;
test_descending -> range;
test_descending -> assertTupleEqual;
test_prefix -> format_suffix;
test_prefix -> range;
test_prefix -> assertListEqual;
test_plural -> format_suffix;
test_plural -> range;
test_plural -> assertListEqual;
test_main -> run_unittest;
Module -> "ConvertTest.__init__";
Module -> "PartitionTest.__init__";
Module -> "BaseTwoTest.__init__";
Module -> "BaseSixTest.__init__";
Module -> "BaseTenTest.__init__";
Module -> "BytesTest.__init__";
Module -> "SuffixTest.__init__";
Module -> test_main;
"ConvertTest.__init__" -> test_min;
"ConvertTest.__init__" -> test_max;
"ConvertTest.__init__" -> test_ternary;
"ConvertTest.__init__" -> test_binary;
"PartitionTest.__init__" -> setUp;
"PartitionTest.__init__" -> test_base;
"BaseTwoTest.__init__" -> setUp;
"BaseSixTest.__init__" -> setUp;
"BaseTenTest.__init__" -> setUp;
"BytesTest.__init__" -> test_ascending;
"BytesTest.__init__" -> test_descending;
"SuffixTest.__init__" -> test_prefix;
"SuffixTest.__init__" -> test_plural;
}
