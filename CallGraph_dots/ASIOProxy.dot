digraph  {
createLogger;
getLogger;
setLevel;
StreamHandler;
Formatter;
setFormatter;
addHandler;
close;
closed;
len;
info;
__connectCallback;
strerror;
getpeername;
getsockname;
asyncRead;
__readFromClientCallback;
asyncWriteAll;
__readFromRemoteCallback;
__writeToRemoteCallback;
__writeToClientCallback;
__acceptCallback;
Connection;
asyncAccept;
parseAddrPortString;
split;
int;
printUsage;
error;
main;
exit;
map;
createAsyncIOService;
str;
Acceptor;
run;
Module;
createLogger -> getLogger;
createLogger -> setLevel;
createLogger -> StreamHandler;
createLogger -> Formatter;
createLogger -> setFormatter;
createLogger -> addHandler;
close -> closed;
close -> len;
close -> info;
close -> close;
__connectCallback -> info;
__connectCallback -> strerror;
__connectCallback -> close;
__connectCallback -> getpeername;
__connectCallback -> getsockname;
__connectCallback -> asyncRead;
__readFromClientCallback -> closed;
__readFromClientCallback -> close;
__readFromClientCallback -> asyncWriteAll;
__readFromRemoteCallback -> closed;
__readFromRemoteCallback -> close;
__readFromRemoteCallback -> asyncWriteAll;
__writeToRemoteCallback -> closed;
__writeToRemoteCallback -> close;
__writeToRemoteCallback -> asyncRead;
__writeToClientCallback -> closed;
__writeToClientCallback -> close;
__writeToClientCallback -> asyncRead;
__acceptCallback -> info;
__acceptCallback -> getpeername;
__acceptCallback -> getsockname;
__acceptCallback -> Connection;
__acceptCallback -> asyncAccept;
Connection -> close;
Connection -> __connectCallback;
Connection -> __readFromClientCallback;
Connection -> __readFromRemoteCallback;
Connection -> __writeToRemoteCallback;
Connection -> __writeToClientCallback;
parseAddrPortString -> split;
parseAddrPortString -> int;
printUsage -> error;
main -> len;
main -> printUsage;
main -> exit;
main -> map;
main -> parseAddrPortString;
main -> createAsyncIOService;
main -> info;
main -> str;
main -> Acceptor;
main -> run;
Acceptor -> __acceptCallback;
Module -> Connection;
Module -> Acceptor;
Module -> main;
}
